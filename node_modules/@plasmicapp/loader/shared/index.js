"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEntrypoint = void 0;
const child_process_1 = __importDefault(require("child_process"));
const upath_1 = __importDefault(require("upath"));
const cli = __importStar(require("./cli"));
const gen = __importStar(require("./gen"));
async function watchForChanges(plasmicDir, pageDir, cliPath) {
    let oldConfig = await cli.readConfig(plasmicDir);
    const watchCmd = child_process_1.default.spawn("node", [cliPath, "watch", "--yes", "--metadata", "source=loader"], {
        cwd: plasmicDir,
        env: { ...process.env, PLASMIC_LOADER: "1" },
        stdio: "pipe",
    });
    watchCmd.stdout.on("data", async function (data) {
        process.stdout.write(`plasmic: ${data.toString()}`);
        // Once the CLI output this message, we know the components & configs were updated.
        const didUpdate = data.toString().includes("updated to revision");
        if (didUpdate) {
            gen.generateAll({ dir: plasmicDir, pageDir });
            cli.clearStalePages(plasmicDir, pageDir, oldConfig);
            oldConfig = await cli.readConfig(plasmicDir);
        }
    });
}
async function generateEntrypoint({ dir, pageDir, projects, watch, plasmicDir, ignorePages, initArgs = {}, }) {
    console.log("Syncing plasmic projects: ", projects);
    const plasmicExecPath = upath_1.default.join(dir, "node_modules", ".bin", "plasmic");
    await cli.checkAuth(dir, plasmicExecPath);
    await cli.tryInitializePlasmicDir(dir, plasmicDir, initArgs);
    await cli.syncProject(plasmicDir, pageDir, plasmicExecPath, projects);
    await gen.generateAll({ dir: plasmicDir, pageDir, ignorePages });
    if (watch) {
        watchForChanges(plasmicDir, pageDir, plasmicExecPath);
    }
}
exports.generateEntrypoint = generateEntrypoint;
